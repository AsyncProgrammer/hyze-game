/*
 * RUNESCAPE PRIVATE SERVER FRAMEWORK
 * 
 * This file is part of the Hyze Server
 *
 * Hyze is a private RuneScape server focused primarily on
 * in the Brazilian community. The project has only 1 developer
 *
 * Objective of the project is to bring the best content, performance ever seen
 * by brazilians players in relation to private RuneScape servers (RSPS).
 */

package com.hyze.server.network.encoders

import com.hyze.server.network.Session
import com.rs.game.player.Player
import com.rs.io.OutputStream
import org.jboss.netty.channel.ChannelFutureListener


/**
 * DESCRIPTION
 *
 * @author var_5
 * @date 06/09/2020 at 19:04
 */
class LoginPacketsEncoder(session: Session): Encoder(session) {

    fun sendStartupPacket(){
        val stream = OutputStream(1)
        stream.writeByte(0)
        session.write(stream)
    }

    fun sendClientPacket(opcode: Int) {
        val stream = OutputStream(1)
        stream.writeByte(opcode)
        val future = session.write(stream)
        if (future != null) {
            future.addListener(ChannelFutureListener.CLOSE)
        } else {
            session.channel.close()
        }
    }

    fun sendLobbyDetails(player: Player) {
        var ipHash = 0
        val stream = OutputStream()
        stream.writePacketVarByte(player, 2)
        stream.writeByte(player.rights) //rights
        stream.writeByte(0)
        stream.writeByte(0)
        stream.write24BitInteger(0)
        stream.writeByte(0)
        stream.writeByte(0)
        stream.writeByte(0)
        stream.writeLong(500) //members subscription end
        stream.write5ByteInteger(12)
        stream.writeByte(0x1) //0x1 - if members, 0x2 - subscription
        stream.writeInt(1)
        stream.writeByte(1)
        stream.writeInt(0) //recovery questions set date
        stream.writeShort(1) //recovery questions 1 for set, 0 for not set
        stream.writeShort(5) //Messages add support for forum integration
        stream.writeShort(if (player.lastLoggedIn == 0) 0 else ((player.lastLoggedIn - 1014786000000L) / 86400000 + 1).toInt()) //last logged in date
        if (player.lastIP != null) {
            val ipSplit = player.lastIP.split("\\.").toTypedArray()
            ipHash = ipSplit[0].toInt() shl 24 or (ipSplit[1].toInt() shl 16) or (ipSplit[2].toInt() shl 8) or ipSplit[3].toInt()
        }
        stream.writeInt(ipHash) //ip part
        stream.writeByte(3) //email status (0 - no email, 1 - pending parental confirmation, 2 - pending confirmation, 3 - registered)
        stream.writeShort(0)
        stream.writeShort(0)
        stream.writeByte(0)
        stream.writeGJString(player.displayName)
        stream.writeByte(0)
        stream.writeInt(1)
        stream.writeByte(1)
        stream.writeShort(1) // default world id (should be generated by country ids like we found in client today)
        stream.writeGJString(if (player.lastIP == null) "None" else player.lastIP.toString())
        stream.endPacketVarByte()
        player.session.write(stream)
    }

    fun sendLoginDetails(player: Player) {
        val stream = OutputStream()
        stream.writePacketVarByte(null, 2)
        stream.writeByte(player.rights)
        stream.writeByte(0)
        stream.writeByte(0)
        stream.writeByte(0)
        stream.writeByte(1)
        stream.writeByte(0)
        stream.writeShort(player.index)
        stream.writeByte(1)
        stream.write24BitInteger(0)
        stream.writeByte(1) //is member world
        stream.writeString(player.displayName)
        stream.endPacketVarByte()
        session.write(stream)
    }

}